openapi: 3.0.0
info: 
  title: Ordered ToDo list 
security:
  - basicAuth: []
paths:
  /register:
    post:
      security: []
      tags:
        - users
      responses:
        409:
          description: 'Username conficts with already exists'
          content:
            application/json:
              example: '{"status_code": "409 Conflict", "detail": "User with username = %user% already exists"}'
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
        200:
          description: 'User registered'
  /list/my:
    get:
      tags:
        - lists
      description: "Returns user owned list"
      responses:
        200:
          content:
            application/json:
              type: object
              properties:
                list_id:
                  type: integer
  /list/:
    get:
      tags:
        - lists
      description: "Get all lists ids"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  list_ids:
                    type: array
                    items:
                      type: integer
    post:
      tags:
        - lists
      description: "Create list"
  /list/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: "List id"
    put:
      tags:
        - lists
      description: "Modify list"
      responses:
        404:
          $ref: '#/components/responses/ListNotFound'
    get: 
      parameters:
        - in: path
          name: count
          required: false
          schema:
            type: integer
          description: "Specify maximum entries in response"
        - in: path
          name: offset
          required: false
          schema:
            type: integer
          description: "Entries offset"
      tags:
        - lists
      description: "Get list"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties: 
                  total_entries:
                    type: integer
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        priority:
                          type: integer
                        description:
                          type: string
        404:
          $ref: '#/components/responses/ListNotFound'
    delete:
      tags:
        - lists
      description: "Delete list"
      responses:
        404:
          $ref: '#/components/responses/ListNotFound'

components:
  responses:
    ListNotFound:
      description: "List not found"
      content:
        application/json:
          example: '{"status_code": "404 Not Found", "detail": "List with id %id% not found"}'
          schema:
            $ref: '#/components/schemas/ErrorResponseSchema'
  schemas:
    ErrorResponseSchema:
      type: object
      properties:
        status_code:
          type: string
          required: true  
        detail:
          type: string
  secutitySchemes:
    basicAuth: 
      type: http
      scheme: basic
